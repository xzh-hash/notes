一、基础概念
        图其实是一种相对来说比较高级一点的数据结构，相较于只有线性关系的线性表和树形结构，图的结构明显更为复杂。图是由顶点的有穷非空集合和边的集合组成，顶点的有穷非空集合决定了图这一数据结构至少有一个顶点，图可以只有顶点没有边。
1.1 图的分类
        图按照边的有无向性可以分为有向图和无向图，不管是有向图还是无向图根据顶点之间的联系方式又可以分为有向完全图、有向图、无向完全图、无向图。在有向完全图中，我们称有向图的边为弧，并用一个有序偶数对<vi,vj>来表示，其中vi称之为起始点或者弧尾、vj被称之为结束点或弧头。

无向完全图

n个顶点的边的条数：n(n-1)/2

有向完全图

含有n个顶点的有向完全图有n(n-1)条边

1.2 其它概念
        当图的边或是弧各自含有与其相关的数并代表着自身的价值，或者是用于路径消耗的花费，我们一般称之为边/弧的权。如果一张图带有边的权，那么就被称之为网。我们用度来表示一个顶点自身所关联的边，无向图的度等于各个顶点的度求和后取一半，有向图的度等于入度的求和或者是出度的求和，一个顶点p的入度是以该顶点为终点的有向边的集合，而出度则是以该顶点为起点的有向边的数目。与树形结构类似，图也有子图这一个概念，我们也借助树这一种数据结构引申出连通图生成树这一概念。连通图生成树是一个极小的连通子图，它含有图中全部的n个顶点，但只有足以构成一棵树的n-1条边。成为连通图生成树的条件：图是连通图；若图有n个顶点则只有n-1条边。

连通图与非连通图：

所谓的连通图其实就是图结构中不含独立的子图，通俗一点来将，我们可以将一个数据点从一个顶点通过顶点和边的联系移动到整个图中的任意位置处。

二、图的存储结构
2.1 邻接矩阵
        对于含有N个节点的图，我们可以使用一个N*N的矩阵A来表示图中边的关系，同时使用一个一维数组来记录图中所有的顶点。在上面荔枝使用一个有序偶数对<vi,vj>来表示两节点之间的边的关系，我们也可以应用在矩阵A中，在矩阵A中的Aij处如果数值为0，则代表vi和vj这两个结点之间不存在边的连接，即<vi,vj>不是图的边。在这里我们对于有权图，我们可以使用Aij来代表权值并记录两个结点之间的联系；对于无权图，我们在Aij处记0或1来分别表示<vi,vj>是图的边和<vi,vj>不是图的边。
需要注意的是：

        不论是有向图还是无向图的邻接矩阵的主对角线上的元素都是0，无向图的邻接矩阵是对称的，即以从左上角到右下角的直线为轴是对称的；而对于有向图来说它的邻接矩阵不是对称的，而判断从vi到vj有没有弧只需要看邻接矩阵的Aij处的数值是否非零。
2.2 邻接表
        在上面我们了解了一种存储图的结构——邻接矩阵，邻接矩阵几乎记录了所有结点之间的关系，但是在一个稀疏图中这样处理无疑会导致大量的资源浪费。图的邻接表使用的是顺序存储和链式存储同时进行的形式，也就是对图的每一个零点创建一个单链表，每个单链表由点域和指针域组成，邻接表的结点主要分为顶点表结点、边表结点。

图的邻接表表示并不唯一，各边结点的链接次序可以是任意的，它取决于建立邻接表的算法及边的输入次序。
